# Factory Production Calculator v2.0 BACKEND
# Based off version 1.3.1 (2024-03-03)

# key-error free value for dictionaries
def currentValue(dictionary: dict, key: any, default: any = 0):
    if key in dictionary.keys():
        return dictionary[key]
    else:
        return default

# getting data from data-list
def getRawData(game: str, gameSettings: dict, parameter: str | None):
    def settingValue(setting):
        return currentValue(gameSettings, setting, data["defaultGameSettings"][setting])
    if game == "Captain of Industry":
        data = {
            "recipes": [
                ({"33": 20}, {"01": 10}, 20, "5f"),
                ({"0f": 20}, {"01": 5}, 20, "5f"),
                ({"28": 1}, {"2c": 800000, "01": 1}, 20, "21"),
                ({"b4": 6}, {"01": 3}, 20, "11"),
                ({"04": 6}, {"01": 2}, 10, "11"),
                ({"33": 200}, {"01": 100}, 20, "60"),
                ({"0f": 200}, {"01": 50}, 20, "60"),
                ({"28": 12}, {"01": 10}, 20, "2e"),
                ({"49": 8}, {"01": 10}, 20, "2e"),
                ({"58": 12}, {"01": 8}, 20, "2e"),
                ({"3c": 16}, {"01": 4}, 20, "2e"),
                ({"06": 6}, {"01": 2}, 10, "11"),
                ({"5f": 4}, {"01": 3}, 20, "11"),
                ({"11": 4}, {"01": 3}, 20, "11"),
                ({"a9": 2}, {"01": 8}, 10, "11"),
                ({"99": 6}, {"01": 6}, 20, "11"),
                ({"7a": 12}, {"01": 8}, 20, "2e"),
                ({"32": 12}, {"01": 4}, 20, "2e"),
                ({"02": 12}, {"01": 8}, 20, "2e"),
                ({"33": 30, "b7": 4}, {"a9": 1, "0f": 12, "a3": 4, "01": 3}, 10, "2b"),
                ({"4c": 4, "7b": 8}, {"02": 4}, 40, "12"),
                ({"9e": 12, "a2": 1}, {"a9": 4, "02": 3, "b7": 7}, 20, "61"),
                ({"4c": 4, "7b": 8}, {"02": 4}, 20, "13"),
                ({"02": 4, "7c": 6}, {"35": 10}, 20, "12"),
                ({"02": 4}, {"7b": 8, "4c": 4}, 10, "26"),
                ({"a7": 4, "02": 1, "7c": 8}, {"05": 8, "0f": 4}, 80, "2d"),
                ({"02": 16}, {"7b": 32, "4c": 16}, 10, "27"),
                ({"02": 4, "7c": 6}, {"35": 10}, 10, "13"),
                ({"02": 2, "4d": 4, "a6": 1}, {"03": 8}, 20, "13"),
                ({"64": 8, "03": 4, "79": 4}, {"65": 8}, 20, "06"),
                ({"64": 8, "03": 4, "79": 4}, {"65": 8}, 10, "07"),
                ({"b9": 8}, {"39": 8, "04": 1}, 30, "44"),
                ({"9f": 8}, {"1c": 3, "04": 4}, 30, "44"),
                ({"0e": 8}, {"1c": 6, "04": 2}, 30, "44"),
                ({"24": 8, "b7": 2}, {"25": 6, "04": 2}, 40, "44"),
                ({"82": 10}, {"04": 8}, 10, "45"),
                ({"b9": 10}, {"04": 16}, 10, "45"),
                ({"24": 10}, {"04": 12}, 10, "45"),
                ({"9f": 10}, {"04": 18}, 10, "45"),
                ({"9f": 6, "b7": 4, "a9": 1, "59": 1}, {"aa": 8, "04": 3}, 40, "2f"),
                ({"82": 20}, {"04": 16}, 10, "46"),
                ({"b9": 20}, {"04": 32}, 10, "46"),
                ({"24": 20}, {"04": 24}, 10, "46"),
                ({"9f": 20}, {"04": 36}, 10, "46"),
                ({"b7": 8, "04": 18}, {"a2": 8, "33": 6}, 10, "0d"),
                ({"04": 12}, {"15": 6}, 60, "45"),
                ({"04": 12}, {"15": 6}, 30, "46"),
                ({"63": 8, "05": 4}, {"64": 8}, 20, "06"),
                ({"63": 8, "05": 4}, {"64": 8}, 10, "07"),
                ({"82": 8, "a7": 2, "1c": 1, "7f": 1}, {"9a": 12, "06": 1}, 20, "2f"),
                ({"24": 8, "a7": 2, "1c": 1, "7f": 1}, {"9a": 16, "06": 1}, 20, "2f"),
                ({"a8": 10, "b7": 2}, {"a7": 8, "06": 2}, 40, "2f"),
                ({"b7": 8, "06": 18}, {"a2": 8, "33": 6}, 10, "0d"),
                ({"06": 12}, {"15": 8}, 60, "45"),
                ({"06": 12}, {"15": 8}, 30, "46"),
                ({"39": 8, "b7": 4}, {"09": 12}, 30, "09"),
                ({"5e": 2, "09": 4, "9a": 6}, {"3a": 4}, 20, "06"),
                ({"2b": 2, "09": 4, "9a": 6}, {"3a": 4}, 20, "06"),
                ({"29": 14, "14": 4, "b7": 4}, {"0a": 8, "33": 8}, 40, "10"),
                ({"4f": 3, "ba": 3, "0a": 4}, {"17": 4}, 40, "04"),
                ({"4f": 3, "ba": 3, "0a": 4}, {"17": 4}, 20, "05"),
                ({"4f": 3, "ba": 3, "0a": 4}, {"17": 4}, 10, "06"),
                ({"4f": 6, "ba": 6, "0a": 8}, {"17": 8}, 10, "07"),
                ({"b7": 8, "32": 9}, {"a2": 8, "0f": 12}, 10, "0f"),
                ({"b7": 8, "3c": 12}, {"a2": 8, "0f": 12}, 10, "0f"),
                ({"a7": 8, "7c": 8}, {"32": 6, "0f": 8}, 40, "2d"),
                ({"25": 6, "7c": 8}, {"32": 3, "0f": 6}, 40, "2d"),
                ({"59": 12, "3c": 4}, {"10": 4, "0f": 12}, 40, "57"),
                ({"59": 12, "4c": 4}, {"10": 4, "0f": 8}, 40, "57"),
                ({"3c": 12, "a2": 1}, {"4c": 14, "0f": 12}, 20, "37"),
                ({"0f": 12, "93": 4}, {}, 10, "30"),
                ({"4c": 14, "0f": 12}, {"3c": 12, "b7": 1}, 20, "13"),
                ({"0f": 48}, {"46": 2}, 20, "13"),
                ({"59": 6, "14": 1}, {"10": 2, "33": 6}, 40, "56"),
                ({"10": 1, "91": 2, "98": 6, "b7": 4}, {"16": 8}, 40, "16"),
                ({"10": 1, "91": 2, "47": 6, "b7": 4}, {"16": 8}, 40, "16"),
                ({"10": 1, "5d": 2, "98": 6, "b7": 4}, {"16": 8}, 40, "16"),
                ({"10": 1, "5d": 2, "47": 6, "b7": 4}, {"16": 8}, 40, "16"),
                ({"10": 1, "91": 2, "98": 6, "b7": 4}, {"16": 8}, 20, "17"),
                ({"10": 1, "91": 2, "47": 6, "b7": 4}, {"16": 8}, 20, "17"),
                ({"10": 1, "5d": 2, "98": 6, "b7": 4}, {"16": 8}, 20, "17"),
                ({"10": 1, "5d": 2, "47": 6, "b7": 4}, {"16": 8}, 20, "17"),
                ({"10": 2, "91": 4, "98": 12, "b7": 8}, {"16": 16}, 20, "18"),
                ({"10": 2, "91": 4, "47": 12, "b7": 8}, {"16": 16}, 20, "18"),
                ({"10": 2, "5d": 4, "98": 12, "b7": 8}, {"16": 16}, 20, "18"),
                ({"10": 2, "5d": 4, "47": 12, "b7": 8}, {"16": 16}, 20, "18"),
                ({"11": 10, "b7": 3, "90": 1}, {"5e": 5, "5f": 2}, 20, "2f"),
                ({"11": 10}, {"5f": 9}, 20, "2f"),
                ({"ba": 12}, {"14": 5, "33": 4}, 40, "14"),
                ({"52": 8, "14": 3}, {"75": 8, "33": 6}, 20, "0b"),
                ({"50": 8, "14": 3}, {"75": 8, "97": 4, "33": 8}, 20, "0b"),
                ({"20": 8, "14": 3}, {"73": 8, "33": 6}, 20, "0b"),
                ({"1e": 8, "14": 3}, {"73": 8, "97": 4, "33": 8}, 20, "0b"),
                ({"26": 18, "14": 2}, {"28": 8, "b6": 4, "33": 12}, 20, "0a"),
                ({"28": 4, "14": 1}, {"8f": 6, "b6": 2}, 30, "58"),
                ({"b7": 8, "14": 5}, {"a2": 8, "33": 10}, 10, "0d"),
                ({"45": 8, "14": 3}, {"74": 8, "97": 4, "33": 8}, 20, "0b"),
                ({"0c": 12, "14": 3}, {"74": 8, "33": 6}, 20, "0b"),
                ({"93": 10, "14": 1}, {"b7": 6, "0b": 4, "33": 2}, 10, "0a"),
                ({"7a": 4, "14": 1}, {"8f": 6, "b6": 1}, 30, "58"),
                ({"47": 8, "91": 4, "14": 1}, {"37": 12}, 20, "45"),
                ({"47": 8, "5d": 4, "14": 1}, {"37": 12}, 20, "45"),
                ({"14": 4, "13": 2}, {"46": 8, "9e": 4}, 40, "12"),
                ({"47": 8, "91": 4, "14": 1}, {"37": 12}, 10, "46"),
                ({"47": 8, "5d": 4, "14": 1}, {"37": 12}, 10, "46"),
                ({"52": 16, "14": 5}, {"75": 16, "33": 10}, 20, "0c"),
                ({"51": 12, "59": 1, "14": 5}, {"75": 16, "97": 6, "33": 12}, 20, "0c"),
                ({"20": 16, "14": 5}, {"73": 16, "33": 10}, 20, "0c"),
                ({"1f": 12, "91": 2, "14": 5}, {"73": 16, "97": 6, "33": 12}, 20, "0c"),
                ({"45": 16, "14": 5}, {"74": 16, "97": 4, "33": 12}, 20, "0c"),
                ({"0c": 24, "14": 5}, {"74": 16, "33": 10}, 20, "0c"),
                ({"0c": 24, "46": 1, "b7": 2}, {"74": 16, "a3": 2, "33": 2}, 20, "03"),
                ({"91": 8, "14": 2, "46": 1}, {"76": 8, "97": 3, "33": 6}, 20, "02"),
                ({"14": 4, "13": 2}, {"46": 8, "9e": 4}, 20, "13"),
                (
                    {"91": 16, "14": 2, "46": 1, "b7": 2},
                    {"76": 16, "97": 6, "a3": 2, "33": 12},
                    20,
                    "03",
                ),
                ({"90": 8, "b7": 8}, {"0b": 16}, 20, "45"),
                ({"93": 30}, {"0b": 16}, 20, "2a"),
                ({"93": 30}, {"0b": 16}, 40, "29"),
                ({"93": 18, "a4": 1}, {"b7": 12, "0b": 7}, 10, "63"),
                ({"93": 18, "a2": 2}, {"b7": 13, "0b": 7}, 10, "63"),
                ({"93": 12, "a3": 4}, {"b7": 12, "0b": 4}, 10, "63"),
                ({"93": 3, "a5": 4}, {"b7": 6, "0b": 1}, 10, "63"),
                ({"90": 8, "b7": 8}, {"0b": 16}, 10, "46"),
                ({"0b": 2}, {}, 2, "39"),
                ({"ab": 36, "37": 2, "0b": 6}, {"b7": 12, "97": 24}, 20, "66"),
                ({"0b": 16}, {"90": 8}, 20, "2a"),
                ({"0b": 16}, {"90": 8}, 40, "29"),
                ({"0b": 6}, {"13": 4}, 10, "26"),
                ({"0b": 24}, {"13": 16}, 10, "27"),
                ({"b6": 40, "91": 4, "13": 4}, {"b7": 40, "99": 12}, 30, "66"),
                ({"b6": 80, "37": 4, "13": 8}, {"b7": 60, "99": 18}, 30, "66"),
                ({"7a": 4, "13": 2}, {"7f": 16, "33": 8}, 20, "4d"),
                ({"32": 4, "13": 2}, {"7f": 16, "33": 8}, 20, "4d"),
                ({"99": 12}, {"3c": 5, "15": 1}, 40, "01"),
                ({"82": 14}, {"3c": 6, "15": 1}, 60, "01"),
                ({"b0": 14}, {"3c": 6, "15": 1}, 60, "01"),
                ({"3b": 12}, {"3c": 10, "15": 1}, 90, "01"),
                ({"81": 14}, {"3c": 6, "15": 1}, 60, "01"),
                ({"b9": 11}, {"3c": 10, "15": 1}, 90, "01"),
                ({"5f": 8}, {"3c": 4, "15": 2}, 120, "01"),
                ({"5f": 12}, {"15": 4}, 60, "45"),
                ({"5f": 8}, {"15": 3}, 20, "46"),
                ({"15": 12, "b7": 4}, {"34": 16}, 20, "45"),
                ({"47": 8, "15": 8}, {"29": 16}, 20, "45"),
                ({"15": 12, "b7": 4}, {"34": 16}, 10, "46"),
                ({"47": 8, "15": 8}, {"29": 16}, 10, "46"),
                ({"4f": 3, "ba": 3, "16": 4}, {"17": 4}, 40, "04"),
                ({"4f": 3, "ba": 3, "16": 4}, {"17": 4}, 20, "05"),
                ({"4f": 3, "ba": 3, "16": 4}, {"17": 4}, 10, "06"),
                ({"4f": 6, "ba": 6, "16": 8}, {"17": 8}, 10, "07"),
                ({"17": 8, "2d": 4}, {"18": 4}, 80, "04"),
                ({"17": 8, "2d": 4}, {"18": 4}, 40, "05"),
                ({"17": 8, "2d": 4}, {"18": 4}, 20, "06"),
                ({"17": 8, "2d": 4}, {"18": 4}, 10, "07"),
                ({"18": 8, "a6": 4}, {"19": 4}, 80, "05"),
                ({"18": 8, "a6": 4}, {"19": 4}, 40, "06"),
                ({"18": 8, "a6": 4}, {"19": 4}, 20, "07"),
                ({"19": 8, "2e": 4}, {"1a": 4}, 80, "06"),
                ({"19": 8, "2e": 4}, {"1a": 4}, 40, "07"),
                ({"19": 8, "2e": 4}, {"1a": 4}, 20, "08"),
                ({"39": 5, "a7": 2, "1c": 1, "2b": 1, "3b": 1}, {"0d": 7}, 30, "09"),
                ({"32": 5, "1c": 9}, {"28": 18}, 40, "12"),
                ({"82": 8, "90": 2, "1c": 1, "7f": 1}, {"9a": 12, "06": 1}, 20, "2f"),
                ({"24": 8, "90": 2, "1c": 1, "7f": 1}, {"9a": 16, "06": 1}, 20, "2f"),
                ({"32": 5, "1c": 9}, {"28": 18}, 20, "13"),
                ({"4e": 16, "b7": 4}, {"1d": 13}, 40, "1d"),
                ({"4e": 16, "00": 4}, {"1d": 16}, 40, "1d"),
                ({"8f": 1, "1d": 4}, {"2d": 4}, 60, "04"),
                ({"8f": 1, "1d": 4}, {"2d": 4}, 20, "05"),
                ({"8f": 1, "1d": 4}, {"2d": 4}, 10, "06"),
                ({"8f": 2, "1d": 8}, {"2d": 8}, 10, "07"),
                ({"8f": 4, "1d": 16}, {"2d": 16}, 10, "08"),
                ({"44": 8, "7f": 4, "1d": 2}, {"7e": 8}, 40, "06"),
                ({"44": 8, "7f": 4, "1d": 2}, {"7e": 8}, 20, "07"),
                ({"44": 16, "7f": 8, "1d": 4}, {"7e": 16}, 20, "08"),
                ({"68": 1, "1d": 1, "7f": 1}, {"69": 1}, 30, "42"),
                ({"6b": 1, "1d": 1, "7f": 1}, {"6c": 1}, 30, "42"),
                ({"6e": 1, "1d": 1, "7f": 1}, {"6f": 1}, 30, "42"),
                ({"71": 1, "1d": 1, "7f": 1}, {"72": 1}, 30, "42"),
                ({"68": 1, "1d": 1, "7f": 1}, {"69": 1}, 15, "43"),
                ({"6b": 1, "1d": 1, "7f": 1}, {"6c": 1}, 15, "43"),
                ({"6e": 1, "1d": 1, "7f": 1}, {"6f": 1}, 15, "43"),
                ({"71": 1, "1d": 1, "7f": 1}, {"72": 1}, 15, "43"),
                ({"1e": 12}, {"1f": 12}, 20, "1f"),
                ({"1e": 72}, {"1f": 72}, 20, "20"),
                (
                    {"1f": 12, "91": 2, "46": 1, "b7": 2},
                    {"73": 16, "97": 6, "a3": 2, "33": 4},
                    20,
                    "03",
                ),
                ({"21": 4}, {"20": 12}, 10, "5c"),
                ({"20": 6}, {"21": 2}, 5, "15"),
                ({"20": 16, "46": 1, "b7": 2}, {"73": 16, "a3": 2, "33": 2}, 20, "03"),
                ({}, {"26": 6}, 20, "4a"),
                ({"26": 18, "a2": 2}, {"66": 16, "49": 2, "9e": 6}, 20, "23"),
                ({"a9": 2, "b7": 10}, {"00": 12}, 20, "45"),
                ({"a9": 2, "b7": 10}, {"00": 12}, 10, "46"),
                ({"00": 2}, {"b8": 4}, 2, "39"),
                ({"91": 16, "59": 4, "90": 4, "00": 4}, {"45": 16}, 20, "45"),
                ({"91": 16, "59": 4, "90": 4, "00": 4}, {"45": 16}, 10, "46"),
                ({"81": 4, "00": 2, "44": 2}, {"79": 8}, 20, "13"),
                ({"41": 12, "00": 4}, {"3f": 3, "ab": 9}, 20, "5b"),
                ({"ae": 12, "00": 3}, {"bc": 6, "ab": 6}, 40, "5b"),
                ({"8e": 8, "00": 4}, {"4d": 8, "97": 2}, 40, "5b"),
                ({"96": 2, "00": 1, "b7": 1}, {"68": 1}, 30, "42"),
                ({"6a": 1, "00": 1, "b7": 1}, {"6b": 1}, 30, "42"),
                ({"6d": 1, "00": 1, "b7": 1}, {"6e": 1}, 30, "42"),
                ({"70": 1, "00": 1, "b7": 1}, {"71": 1}, 30, "42"),
                ({"96": 2, "00": 1, "b7": 1}, {"68": 1}, 15, "43"),
                ({"6a": 1, "00": 1, "b7": 1}, {"6b": 1}, 15, "43"),
                ({"6d": 1, "00": 1, "b7": 1}, {"6e": 1}, 15, "43"),
                ({"70": 1, "00": 1, "b7": 1}, {"71": 1}, 15, "43"),
                ({"a0": 18, "00": 8, "74": 3}, {"87": 16, "80": 1, "38": 3}, 60, "49"),
                ({"a0": 1, "00": 1, "74": 1, "90": 1}, {"07": 1, "38": 1}, 20, "49"),
                ({"a1": 1, "00": 1, "74": 1, "90": 1}, {"07": 1, "38": 1}, 20, "49"),
                ({"23": 10, "00": 1, "74": 2, "a6": 1}, {"22": 8, "38": 2}, 60, "49"),
                ({"27": 1, "90": 1}, {"07": 1}, 20, "13"),
                ({"bc": 1, "90": 1}, {"07": 1}, 20, "13"),
                ({"08": 5}, {"07": 4, "22": 1}, 20, "28"),
                ({"07": 0}, {"08": 0}, 15, "2c"),
                ({"30": 1, "90": 1}, {"22": 1}, 20, "13"),
                ({"b7": 96, "22": 1}, {"a4": 96, "23": 1}, 15, "2c"),
                ({"bc": 6, "4d": 1}, {"31": 1, "27": 5}, 80, "28"),
                ({"87": 4, "4d": 1}, {"31": 1, "27": 3}, 80, "28"),
                ({"31": 5, "4d": 1}, {"30": 1, "27": 4}, 160, "28"),
                ({"80": 1, "27": 3}, {"78": 3}, 90, "13"),
                ({"66": 16, "a2": 1}, {"28": 12, "58": 4}, 20, "24"),
                ({"49": 4, "4c": 4}, {"28": 8, "3c": 2}, 20, "1e"),
                ({"7a": 6, "4c": 4}, {"28": 8, "3c": 2}, 20, "1e"),
                ({"3c": 12, "7c": 6}, {"28": 8, "b7": 2}, 20, "1e"),
                ({"28": 4, "a9": 1}, {"8f": 6}, 20, "58"),
                ({"28": 8, "a2": 1}, {"7a": 6, "9e": 2}, 20, "1e"),
                ({"28": 6}, {"2c": 5000000 / 3, "33": 8}, 20, "22"),
                ({"61": 3000000}, {"2c": 2000000}, 60, "4e"),
                ({"61": 18000000}, {"2c": 15000000}, 60, "4f"),
                ({"4f": 4, "60": 2, "2d": 2}, {"b1": 4}, 80, "04"),
                ({"4f": 4, "60": 2, "2d": 2}, {"b1": 4}, 40, "05"),
                ({"4f": 4, "60": 2, "2d": 2}, {"b1": 4}, 20, "06"),
                ({"4f": 4, "60": 2, "2d": 2}, {"b1": 4}, 10, "07"),
                ({"60": 2, "2d": 1}, {"5a": 35}, 20, "3c"),
                ({"60": 8, "2d": 4}, {"5a": 160}, 20, "3d"),
                ({"60": 8, "2d": 4}, {"5a": 160, "85": 6}, 20, "3d"),
                ({"60": 4, "2d": 4}, {"54": 8}, 20, "05"),
                ({"60": 4, "2d": 4}, {"54": 8}, 10, "06"),
                ({"60": 8, "2d": 8}, {"54": 16}, 10, "07"),
                ({"2d": 12, "2e": 4, "a6": 4}, {"4a": 12}, 60, "06"),
                ({"2d": 12, "2e": 4, "a6": 4}, {"4a": 12}, 30, "07"),
                ({"2d": 12, "2e": 4, "a6": 4}, {"4a": 12}, 15, "08"),
                ({"7e": 4, "2d": 4, "95": 4}, {"2e": 4}, 40, "06"),
                ({"7e": 4, "2d": 4, "95": 4}, {"2e": 4}, 20, "07"),
                ({"7e": 8, "2d": 8, "95": 8}, {"2e": 8}, 20, "08"),
                ({"b2": 4, "2e": 2}, {"b3": 4}, 40, "06"),
                ({"b2": 4, "2e": 2}, {"b3": 4}, 20, "07"),
                ({"55": 8, "2e": 2}, {"56": 4}, 40, "06"),
                ({"55": 8, "2e": 2}, {"56": 4}, 20, "07"),
                ({"60": 6, "2e": 4}, {"5b": 160}, 20, "3e"),
                ({"60": 6, "2e": 4}, {"5b": 160, "85": 8}, 20, "3e"),
                ({"67": 2, "2e": 2}, {"2f": 2}, 40, "07"),
                ({"67": 2, "2e": 2}, {"2f": 2}, 20, "08"),
                ({"56": 8, "2f": 2}, {"57": 4}, 40, "07"),
                ({"a6": 1, "2f": 5}, {"94": 4}, 80, "07"),
                ({"a6": 1, "2f": 5}, {"94": 4}, 40, "08"),
                ({"60": 2, "2f": 2}, {"5c": 60}, 20, "3f"),
                ({"60": 2, "2f": 2}, {"5c": 60, "85": 5}, 20, "3f"),
                ({"2f": 2, "7f": 2, "a6": 2}, {"1b": 4}, 40, "08"),
                ({"31": 4, "a6": 1}, {"af": 4}, 80, "06"),
                ({"31": 1, "80": 1}, {"30": 1}, 20, "07"),
                ({"32": 4, "a9": 1}, {"8f": 6}, 20, "58"),
                ({"32": 3, "7f": 2}, {"2a": 8}, 40, "12"),
                ({"32": 3, "7f": 2}, {"2a": 8}, 20, "13"),
                ({"62": 4, "2a": 4}, {"63": 8}, 20, "06"),
                ({"62": 4, "2a": 4}, {"63": 8}, 10, "07"),
                ({"75": 16, "7c": 12}, {"77": 8, "33": 16}, 40, "4b"),
                ({"b7": 8, "bb": 8}, {"a2": 8, "33": 6}, 10, "0d"),
                ({"b7": 8, "49": 6}, {"a2": 8, "33": 15}, 10, "0f"),
                ({"b7": 8, "66": 9}, {"a2": 8, "33": 15}, 10, "0f"),
                ({"b7": 8, "58": 9}, {"a2": 8, "33": 12}, 10, "0f"),
                ({"b7": 8, "7a": 9}, {"a2": 8, "33": 12}, 10, "0f"),
                ({"b4": 48, "3c": 2, "b7": 6}, {"33": 24, "a2": 6}, 20, "38"),
                ({"b5": 16, "3c": 2, "b7": 6}, {"33": 24, "a2": 6}, 20, "38"),
                ({"b4": 48, "4c": 2, "b7": 6}, {"33": 24, "a2": 6}, 20, "38"),
                ({"b5": 16, "4c": 2, "b7": 6}, {"33": 24, "a2": 6}, 20, "38"),
                ({"75": 32, "7c": 12}, {"77": 16, "33": 24}, 40, "4c"),
                ({"3f": 6, "91": 1}, {"3d": 3, "33": 4}, 20, "33"),
                ({"42": 3}, {"3d": 3, "33": 3}, 20, "33"),
                ({"52": 16, "46": 1, "b7": 2}, {"75": 16, "a3": 2, "33": 2}, 20, "03"),
                (
                    {"51": 12, "59": 1, "46": 1, "b7": 2},
                    {"75": 16, "97": 6, "a3": 2, "33": 4},
                    20,
                    "03",
                ),
                (
                    {"45": 16, "46": 1, "b7": 2},
                    {"74": 16, "97": 4, "a3": 2, "33": 4},
                    20,
                    "03",
                ),
                ({"34": 4}, {"b8": 1}, 4, "39"),
                ({"35": 2}, {"b8": 1}, 4, "39"),
                ({"35": 10, "59": 2, "a9": 2}, {"36": 14}, 20, "45"),
                ({"35": 10, "59": 2, "a9": 2}, {"36": 14}, 10, "46"),
                ({"36": 2}, {"b8": 2}, 4, "39"),
                ({"38": 1600}, {"8d": 1600}, 72000, "50"),
                ({"5f": 8, "39": 2, "90": 3}, {"92": 8}, 20, "2f"),
                ({"49": 4, "4c": 4}, {"7a": 6, "3c": 4}, 20, "1e"),
                ({"7a": 8, "a2": 1}, {"3c": 10, "9e": 2}, 20, "1e"),
                ({"58": 4, "a2": 1}, {"7a": 4, "3c": 6}, 20, "25"),
                ({"69": 1, "3d": 1}, {"6a": 1}, 30, "42"),
                ({"6c": 1, "3d": 1}, {"6d": 1}, 30, "42"),
                ({"6f": 1, "3d": 1}, {"70": 1}, 30, "42"),
                ({"72": 1, "3d": 1}, {"67": 4}, 30, "42"),
                ({"69": 1, "3d": 1}, {"6a": 1}, 15, "43"),
                ({"6c": 1, "3d": 1}, {"6d": 1}, 15, "43"),
                ({"6f": 1, "3d": 1}, {"70": 1}, 15, "43"),
                ({"72": 1, "3d": 1}, {"67": 4}, 15, "43"),
                ({"40": 8}, {"41": 8}, 40, "1f"),
                ({"40": 48}, {"41": 48}, 40, "20"),
                ({"3e": 8}, {"40": 8}, 20, "1f"),
                ({"3e": 48}, {"40": 48}, 20, "20"),
                ({"43": 4}, {"42": 12}, 10, "5c"),
                ({"42": 6}, {"43": 2}, 5, "15"),
                ({"74": 8}, {"44": 8, "97": 2}, 20, "31"),
                ({"74": 16}, {"44": 24}, 20, "32"),
                ({"44": 8, "a6": 1, "ba": 4}, {"4b": 8}, 60, "05"),
                ({"44": 8, "a6": 1, "ba": 4}, {"4b": 8}, 30, "06"),
                ({"44": 8, "a6": 1, "ba": 4}, {"4b": 8}, 15, "07"),
                ({"b1": 4, "a6": 2, "44": 2}, {"b2": 4}, 40, "06"),
                ({"b1": 4, "a6": 2, "44": 2}, {"b2": 4}, 20, "07"),
                ({"a6": 1, "95": 12, "44": 4}, {"9b": 8}, 120, "06"),
                ({"a6": 1, "95": 12, "44": 4}, {"9b": 8}, 60, "07"),
                ({"a6": 1, "95": 12, "44": 4}, {"9b": 8}, 40, "08"),
                ({"a6": 1, "96": 12, "44": 4}, {"9c": 8}, 60, "08"),
                ({"91": 16, "59": 4, "90": 4}, {"45": 12}, 20, "45"),
                ({"91": 16, "59": 4, "90": 4}, {"45": 12}, 10, "46"),
                ({"8e": 8}, {"47": 8}, 20, "1f"),
                ({"8e": 48}, {"47": 48}, 20, "20"),
                ({"47": 8}, {"5d": 8}, 60, "1f"),
                ({"47": 48}, {"5d": 48}, 60, "20"),
                ({"b7": 1}, {"7c": 4, "4c": 2}, 40, "26"),
                ({"b7": 6, "a4": 4}, {"4c": 12, "7c": 12, "a5": 4}, 20, "37"),
                ({"b7": 1}, {"7c": 4, "4c": 2}, 10, "27"),
                ({"b7": 8, "4c": 12}, {"a2": 8, "a5": 6}, 10, "0f"),
                ({"76": 4, "4c": 1}, {"95": 4}, 20, "5e"),
                ({"4c": 16}, {}, 20, "2e"),
                ({"73": 8}, {"4e": 8}, 40, "40"),
                ({"73": 8}, {"4e": 8}, 20, "41"),
                ({"75": 8}, {"4f": 8}, 40, "40"),
                ({"75": 8}, {"4f": 8}, 20, "41"),
                ({"4f": 5}, {"60": 4}, 40, "04"),
                ({"4f": 5}, {"60": 4}, 20, "05"),
                ({"4f": 5}, {"60": 4}, 10, "06"),
                ({"50": 12}, {"51": 12}, 20, "1f"),
                ({"50": 72}, {"51": 72}, 20, "20"),
                ({"53": 4}, {"52": 12}, 10, "5c"),
                ({"52": 6}, {"53": 2}, 5, "15"),
                ({}, {"88": 1}, 15, "51"),
                ({"54": 1}, {"89": 1}, 15, "52"),
                ({"54": 1}, {"89": 1, "85": 1}, 15, "52"),
                ({"54": 8, "7d": 2, "a6": 1}, {"55": 4}, 20, "06"),
                ({"54": 8, "7d": 2, "a6": 1}, {"55": 4}, 10, "07"),
                ({"55": 1}, {"8a": 1}, 15, "53"),
                ({"55": 1}, {"8a": 1, "85": 2}, 15, "53"),
                ({"56": 1}, {"8b": 1}, 15, "54"),
                ({"56": 1}, {"8b": 1, "85": 3}, 15, "54"),
                ({"57": 1}, {"8c": 2}, 15, "55"),
                ({"57": 1}, {"8c": 2, "85": 8}, 15, "55"),
                ({"a9": 10, "59": 2}, {"97": 5}, 20, "45"),
                ({"a9": 10, "59": 2}, {"97": 5}, 10, "46"),
                ({"bb": 4, "59": 1, "a2": 1}, {"7d": 8}, 40, "12"),
                ({"bb": 4, "59": 1, "a2": 1}, {"7d": 8}, 20, "13"),
                ({"a6": 4}, {"60": 8}, 20, "06"),
                ({"a6": 6}, {"60": 12}, 15, "07"),
                ({"a2": 4}, {"61": 1000000, "a3": 4}, 10, "35"),
                ({"a2": 8}, {"61": 2000000, "a3": 8}, 10, "36"),
                ({"a3": 4}, {"61": 500000, "a5": 4}, 10, "3a"),
                ({"a3": 8}, {"61": 1000000, "a5": 8}, 10, "3b"),
                ({"a4": 8}, {"61": 3000000, "a2": 8}, 10, "62"),
                ({"a6": 4, "7f": 4}, {"62": 4}, 40, "06"),
                ({"a6": 4, "7f": 4}, {"62": 4}, 20, "07"),
                ({"77": 8, "b7": 4}, {"a6": 8}, 40, "19"),
                ({"77": 8, "b7": 4}, {"a6": 8}, 20, "1a"),
                ({"b7": 192, "78": 1}, {"a2": 192, "a1": 1}, 30, "48"),
                ({"7a": 4, "a9": 1}, {"8f": 6}, 20, "58"),
                ({}, {"7c": 12, "7b": 12}, 20, "00"),
                ({"7b": 20}, {}, 20, "5f"),
                ({"7b": 200}, {}, 20, "60"),
                ({"7c": 20}, {}, 20, "5f"),
                ({"7c": 200}, {}, 20, "60"),
                ({"83": 8}, {"84": 8}, 20, "1f"),
                ({"83": 48}, {"84": 48}, 20, "20"),
                ({"84": 8}, {"91": 8}, 60, "1f"),
                ({"84": 48}, {"91": 48}, 60, "20"),
                ({"8d": 1}, {"85": 1}, 10, "5c"),
                ({"9d": 1}, {"85": 1}, 10, "5c"),
                ({"85": 6}, {"86": 2}, 5, "15"),
                ({"85": 48}, {}, 20, "65"),
                ({"86": 16}, {}, 20, "65"),
                ({"93": 30}, {"90": 8}, 40, "2a"),
                ({"93": 30}, {"90": 8}, 80, "29"),
                ({}, {"93": 18}, 10, "59"),
                ({}, {"93": 18}, 10, "5a"),
                ({"93": 2}, {}, 2, "39"),
                ({"95": 24, "b7": 1}, {"96": 8}, 60, "5d"),
                ({"97": 8}, {"98": 8}, 20, "1f"),
                ({"97": 48}, {"98": 48}, 20, "20"),
                ({"9e": 2}, {"b8": 4}, 2, "39"),
                ({"b7": 192, "af": 1}, {"a2": 192, "a0": 1}, 40, "47"),
                ({"b7": 192, "af": 1}, {"a2": 192, "a0": 1}, 30, "48"),
                ({"b7": 1, "48": 20}, {"a4": 1}, 0.1, "64"),
                ({"b7": 2}, {"a4": 2}, 10, "0e"),
                ({"a4": 20}, {}, 20, "5f"),
                ({"a4": 200}, {}, 20, "60"),
                ({"a4": 1}, {"48": 16, "a5": 1}, 0.1, "64"),
                ({"a4": 26}, {"b7": 13}, 16, "1c"),
                ({"b7": 1, "48": 10}, {"a2": 1}, 0.1, "64"),
                ({"b7": 4}, {"a2": 4}, 10, "0e"),
                ({"a2": 20}, {}, 20, "5f"),
                ({"a2": 200}, {}, 20, "60"),
                ({"a2": 4}, {"b7": 2}, 10, "1b"),
                ({"a2": 1}, {"48": 8, "a5": 1}, 0.1, "64"),
                ({"a2": 16}, {"b7": 10}, 10, "1c"),
                ({"b7": 1, "48": 5}, {"a3": 1}, 0.1, "64"),
                ({"a3": 20}, {}, 20, "5f"),
                ({"a3": 200}, {}, 20, "60"),
                ({"a3": 4}, {"b7": 2}, 10, "1b"),
                ({"a2": 1}, {"48": 4, "a5": 1}, 0.1, "64"),
                ({"a3": 16}, {"b7": 12}, 10, "1c"),
                ({"a5": 20}, {}, 20, "5f"),
                ({"a5": 200}, {}, 20, "60"),
                ({"a5": 4}, {"b7": 2}, 10, "1b"),
                ({"a5": 16}, {"b7": 12}, 10, "1c"),
                ({"ab": 2}, {"b8": 5}, 2, "39"),
                ({"ad": 12}, {"ae": 12}, 40, "1f"),
                ({"ad": 72}, {"ae": 72}, 40, "20"),
                ({"b5": 4}, {"b4": 12}, 10, "5c"),
                ({"b4": 6}, {"b5": 2}, 5, "15"),
                ({"b6": 2}, {"b8": 2}, 2, "39"),
                ({}, {"b7": 8}, 10, "34"),
                ({"b7": 2}, {}, 2, "39"),
                ({"b7": 10}, {"12": 8}, 20, "67"),
                ({"ba": 4}, {"bb": 4}, 10, "5c"),
                ({}, {"26": 9}, 20, "68"),
                ({}, {"a9": 6}, 20, "69"),
                ({}, {"83": 8}, 20, "6a"),
                ({}, {"ad": 3}, 20, "6b"),
                ({}, {"14": 9}, 20, "6c"),
                ({}, {"8c": 6}, 20, "6d"),
                ({}, {"59": 6}, 20, "6e"),
                ({}, {"b7": 8}, 20, "6f"),
            ],
            "machineRequirements": [
                ("Power", True, "W"),
                ("Workers", False, ""),
                ("Maintenance I", True, "/ min"),
                ("Maintenance II", True, "/ min"),
                ("Maintenance III", True, "/ min"),
                ("Unity", False, "/ min"),
                ("Computing", True, "TF"),
            ],
            "machines": {
                "00": ("Air separator", (250000, 6, 6, 0, 0, 0, 0), {}),
                "01": ("Anaerobic digester", (50000, 4, 1, 0, 0, 0, 0), {}),
                "02": ("Arc furnace", (3000000, 12, 5, 0, 0, 0, 0), {}),
                "03": ("Arc furnace II", (5500000, 18, 0, 5, 0, 0, 4), {}),
                "04": ("Assembly (manual)", (0, 4, 0, 0, 0, 0, 0), {}),
                "05": ("Assembly (electric)", (80000, 6, 2, 0, 0, 0, 0), {}),
                "06": ("Assembly (electric) II", (150000, 8, 4, 0, 0, 0, 0), {}),
                "07": ("Assembly (robotic)", (250000, 2, 0, 4, 0, 0, 4), {}),
                "08": ("Assembly (robotic) II", (400000, 2, 0, 7, 0, 0, 8), {}),
                "09": ("Baking unit", (200000, 8, 4, 0, 0, 0, 0), {}),
                "0a": ("Basic distiller", (0, 6, 0, 0, 0, 0, 0), {}),
                "0b": ("Blast furnace", (0, 8, 0, 0, 0, 0, 0), {}),
                "0c": ("Blast furnace II", (0, 18, 5, 0, 0, 0, 0), {}),
                "0d": ("Boiler", (0, 6, 0, 0, 0, 0, 0), {}),
                "0e": ("Boiler (electric)", (8000000, 2, 0, 2, 0, 0, 0), {}),
                "0f": ("Boiler (gas)", (0, 6, 0, 0, 0, 0, 0), {}),
                "10": ("Brickworks", (0, 6, 4, 0, 0, 0, 0), {}),
                "11": ("Burner (solid)", (0, 1, 0, 0, 0, 0, 0), {}),
                "12": ("Chemical plant", (250000, 8, 4, 0, 0, 0, 0), {}),
                "13": ("Chemical plant II", (400000, 14, 0, 4, 0, 0, 0), {}),
                "14": ("Coal maker", (0, 2, 0, 0, 0, 0, 0), {}),
                "15": ("Compactor", (100, 2, 0, 0, 0, 0, 0), {}),
                "16": ("Concrete mixer", (100000, 4, 2, 0, 0, 0, 0), {}),
                "17": ("Concrete mixer II", (200000, 7, 4, 0, 0, 0, 0), {}),
                "18": ("Concrete mixer III", (400000, 10, 6, 0, 0, 0, 0), {}),
                "19": ("Cooled caster", (0, 4, 0, 0, 0, 0, 0), {}),
                "1a": ("Cooled caster II", (0, 6, 0, 0, 0, 0, 0), {}),
                "1b": ("Cooling tower", (0, 2, 0, 0, 0, 0, 0), {}),
                "1c": ("Cooling tower (large)", (0, 4, 0, 0, 0, 0, 0), {}),
                "1d": ("Copper electrolysis", (400000, 5, 4, 0, 0, 0, 0), {}),
                "1e": ("Cracking unit", (160000, 12, 4, 0, 0, 0, 0), {}),
                "1f": ("Crusher", (300000, 2, 2, 0, 0, 0, 0), {}),
                "20": ("Crusher (large)", (1200000, 6, 8, 0, 0, 0, 0), {}),
                "21": ("Diesel generator", (0, 2, 6, 0, 0, 0, 0), {}),
                "22": ("Diesel generator II", (0, 2, 10, 0, 0, 0, 0), {}),
                "23": ("Distillation (stage I)", (0, 6, 3, 0, 0, 0, 0), {}),
                "24": ("Distillation (stage II)", (0, 8, 3, 0, 0, 0, 0), {}),
                "25": ("Distillation (stage III)", (0, 8, 3, 0, 0, 0, 0), {}),
                "26": ("Electrolyzer", (900000, 3, 2, 0, 0, 0, 0), {}),
                "27": ("Electrolyzer II", (3600000, 4, 4, 0, 0, 0, 0), {}),
                "28": ("Enrichment plant", (1200000, 14, 0, 4, 0, 0, 0), {}),
                "29": ("Evaporation pond", (0, 4, 1, 0, 0, 0, 0), {}),
                "2a": ("Evaporation pond (heated)", (250000, 6, 2, 0, 0, 0, 0), {}),
                "2b": ("Exhaust scrubber", (200000, 8, 4, 0, 0, 0, 0), {}),
                "2c": ("Fast breeder reactor", (0, 200, 0, 0, 36, 0, 0), {}),
                "2d": ("Fermentation tank", (20000, 4, 2, 0, 0, 0, 0), {}),
                "2e": ("Flare", (0, 1, 0, 0, 0, 0, 0), {}),
                "2f": ("Food processor", (100000, 8, 4, 0, 0, 0, 0), {}),
                "30": ("Gas injection pump", (400000, 4, 4, 0, 0, 0, 0), {}),
                "31": ("Glass maker", (350000, 6, 4, 0, 0, 0, 0), {}),
                "32": ("Glass maker II", (800000, 14, 8, 0, 0, 0, 0), {}),
                "33": ("Gold furnace", (800000, 6, 2, 0, 0, 0, 0), {}),
                "34": ("Groundwater pump", (120000, 2, 4, 0, 0, 0, 0), {}),
                "35": ("High-pressure turbine", (0, 2, 2, 0, 0, 0, 0), {}),
                "36": ("High-pressure turbine II", (0, 2, 0, 2, 0, 0, 0), {}),
                "37": ("Hydrogen reformer", (250000, 12, 4, 0, 0, 0, 0), {}),
                "38": ("Incineration plant", (500000, 18, 0, 0, 0, 0, 0), {}),
                "39": ("Liquid dump", (0, 1, 0, 0, 0, 0, 0), {}),
                "3a": ("Low-pressure turbine", (0, 2, 2, 0, 0, 0, 0), {}),
                "3b": ("Low-pressure turbine II", (0, 2, 0, 2, 0, 0, 0), {}),
                "3c": ("Maintenance depot (basic)", (100000, 6, 0, 0, 0, 0, 0), {}),
                "3d": ("Maintenance depot", (250000, 20, 0, 0, 0, 0, 0), {}),
                "3e": ("Maintenance II depot", (400000, 28, 0, 0, 0, 0, 0), {}),
                "3f": ("Maintenance III depot", (600000, 28, 0, 0, 0, 0, 3), {}),
                "40": ("Metal caster", (0, 2, 0, 0, 0, 0, 0), {}),
                "41": ("Metal caster II", (0, 3, 0, 0, 0, 0, 0), {}),
                "42": ("Microchip machine", (200000, 4, 0, 6, 0, 0, 3), {}),
                "43": ("Microchip machine II", (400000, 6, 0, 10, 0, 0, 6), {}),
                "44": ("Mill", (120000, 5, 2, 0, 0, 0, 0), {}),
                "45": ("Mixer", (100000, 4, 2, 0, 0, 0, 0), {}),
                "46": ("Mixer II", (200000, 4, 4, 0, 0, 0, 0), {}),
                "47": ("Nuclear reactor", (0, 80, 0, 24, 0, 0, 0), {}),
                "48": ("Nuclear reactor II", (0, 110, 0, 36, 0, 0, 0), {}),
                "49": (
                    "Nuclear reprocessing plant",
                    (1200000, 30, 0, 10, 0, 0, 16),
                    {},
                ),
                "4a": ("Oil pump", (80000, 1, 2, 0, 0, 0, 0), {}),
                "4b": ("Oxygen furnace", (120000, 6, 4, 0, 0, 0, 0), {}),
                "4c": ("Oxygen furnace II", (200000, 10, 6, 0, 0, 0, 0), {}),
                "4d": ("Polymerization plant", (400000, 12, 6, 0, 0, 0, 0), {}),
                "4e": ("Power generator", (0, 0, 1, 0, 0, 0, 0), {}),
                "4f": ("Power generator (large)", (0, 0, 6, 0, 0, 0, 0), {}),
                "50": ("Radioactive waste storage", (0, 10, 0, 0, 0, 0, 0), {}),
                "51": ("Research lab", (0, 4, 0, 0, 0, 0.25, 0), {}),
                "52": ("Research lab II", (200000, 8, 8, 0, 0, 0.25, 0), {}),
                "53": ("Research lab III", (400000, 16, 12, 0, 0, 0.2, 0), {}),
                "54": ("Research lab IV", (600000, 30, 0, 8, 0, 0.2, 0), {}),
                "55": ("Research lab V", (1000000, 48, 0, 16, 0, 0.2, 12), {}),
                "56": ("Rotary kiln", (100000, 6, 2, 0, 0, 0, 0), {}),
                "57": ("Rotary kiln (gas)", (100000, 10, 3, 0, 0, 0, 0), {}),
                "58": ("Rubber maker", (300000, 6, 2, 0, 0, 0, 0), {}),
                "59": ("Seawater pump", (100000, 1, 2, 0, 0, 0, 0), {}),
                "5a": ("Seawater pump (tall)", (300000, 1, 4, 0, 0, 0, 0), {}),
                "5b": ("Settling tank", (120000, 6, 2, 0, 0, 0, 0), {}),
                "5c": ("Shredder", (100000, 2, 0, 0, 0, 0, 0), {}),
                "5d": ("Silicon crystallizer", (500000, 8, 0, 5, 0, 0, 4), {}),
                "5e": ("Silicon reactor", (80000, 2, 1, 0, 0, 0, 0), {}),
                "5f": ("Smoke stack", (0, 0, 0, 0, 0, 0, 0), {}),
                "60": ("Smoke stack (large)", (0, 0, 0, 0, 0, 0, 0), {}),
                "61": ("Sour water stripper", (160000, 10, 4, 0, 0, 0, 0), {}),
                "62": ("Super-pressure turbine", (0, 1, 0, 3, 0, 0, 0), {}),
                "63": ("Thermal desalinator", (400000, 4, 2, 0, 0, 0, 0), {}),
                "64": ("Thermal storage", (200000, 4, 4, 0, 0, 0, 0), {}),
                "65": ("Waste sorting plant", (300000, 45, 20, 0, 0, 0, 0), {}),
                "66": ("Wastewater treatment", (600000, 26, 10, 0, 0, 0, 0), {}),
                "67": ("Water chiller", (800000, 3, 2, 0, 0, 0, 0), {}),
                "68": ("Oil rig", (0, 18, 8, 0, 0, 0.4, 0), {}),
                "69": ("Sulfur mine", (0, 12, 10, 0, 0, 0.2, 0), {}),
                "6a": ("Quartz mine", (0, 25, 12, 0, 0, 0.4, 0), {}),
                "6b": ("Uranium mine", (0, 25, 10, 0, 0, 0.4, 0), {}),
                "6c": ("Coal mine", (0, 25, 12, 0, 0, 0.5, 0), {}),
                "6d": ("Rock mine", (0, 25, 8, 0, 0, 0.2, 0), {}),
                "6e": ("Limestone quarry", (0, 25, 10, 0, 0, 0.4, 0), {}),
                "6f": ("Groundwater well", (0, 16, 4, 0, 0, 0.2, 0), {}),
            },
            "durationUnit": "s",
            "gameSettings": [
                {
                    "name": "electricityMultiplier",
                    "type": "float",
                    "displayText": "Electricity multiplier",
                }
            ],
            "defaultGameSettings": {"electricityMultiplier": 1},
            "unitFactor": 60,
            "itemUnit": "/min",
            "itemUnitLong": "per minute",
            "items": {
                "00": "Acid",
                "01": "Air pollution",
                "02": "Ammonia",
                "03": "Anesthetics",
                "04": "Animal feed",
                "05": "Antibiotics",
                "06": "Biomass",
                "07": "Blanket fuel",
                "08": "Blanket fuel (enriched)",
                "09": "Bread",
                "0a": "Bricks",
                "0b": "Brine",
                "0c": "Broken glass",
                "0d": "Cake",
                "0e": "Canola",
                "0f": "Carbon dioxide",
                "10": "Cement",
                "11": "Chicken carcass",
                "12": "Chilled water",
                "13": "Chlorine",
                "14": "Coal",
                "15": "Compost",
                "16": "Concrete slab",
                "17": "Construction parts",
                "18": "Construction parts II",
                "19": "Construction parts III",
                "1a": "Construction parts IV",
                "1b": "Consumer electronics",
                "1c": "Cooking oil",
                "1d": "Copper",
                "1e": "Copper ore",
                "1f": "Copper ore crushed",
                "20": "Copper scrap",
                "21": "Copper scrap pressed",
                "22": "Core fuel",
                "23": "Core fuel (spent)",
                "24": "Corn",
                "25": "Corn mash",
                "26": "Crude oil",
                "27": "Depleted uranium",
                "28": "Diesel",
                "29": "Dirt",
                "2a": "Disinfectant",
                "2b": "Eggs",
                "2c": "Electricity",
                "2d": "Electronics",
                "2e": "Electronics II",
                "2f": "Electronics III",
                "30": "Enriched uranium (20%)",
                "31": "Enriched uranium (4%)",
                "32": "Ethanol",
                "33": "Exhaust",
                "34": "Fertilizer (organic)",
                "35": "Fertilizer I",
                "36": "Fertilizer II",
                "37": "Filter media",
                "38": "Fission product",
                "39": "Flour",
                "3a": "Food pack",
                "3b": "Fruit",
                "3c": "Fuel gas",
                "3d": "Gold",
                "3e": "Gold ore",
                "3f": "Gold ore concentrate",
                "40": "Gold ore crushed",
                "41": "Gold ore powder",
                "42": "Gold scrap",
                "43": "Gold scrap pressed",
                "44": "Glass",
                "45": "Glass mix",
                "46": "Graphite",
                "47": "Gravel",
                "48": "Heat",
                "49": "Heavy oil",
                "4a": "Household appliances",
                "4b": "Household goods",
                "4c": "Hydrogen",
                "4d": "Hydrogen fluoride",
                "4e": "Impure copper",
                "4f": "Iron",
                "50": "Iron ore",
                "51": "Iron ore crushed",
                "52": "Iron scrap",
                "53": "Iron scrap pressed",
                "54": "Lab equipment",
                "55": "Lab equipment II",
                "56": "Lab equipment III",
                "57": "Lab equipment IV",
                "58": "Light oil",
                "59": "Limestone",
                "5a": "Maintenance I",
                "5b": "Maintenance II",
                "5c": "Maintenance III",
                "5d": "Manufactured sand",
                "5e": "Meat",
                "5f": "Meat trimmings",
                "60": "Mechanical parts",
                "61": "Mechanical power",
                "62": "Medical equipment",
                "63": "Medical supplies",
                "64": "Medical supplies II",
                "65": "Medical supplies III",
                "66": "Medium oil",
                "67": "Microchips",
                "68": "Microchips (stage 1a)",
                "69": "Microchips (stage 1b)",
                "6a": "Microchips (stage 1c)",
                "6b": "Microchips (stage 2a)",
                "6c": "Microchips (stage 2b)",
                "6d": "Microchips (stage 2c)",
                "6e": "Microchips (stage 3a)",
                "6f": "Microchips (stage 3b)",
                "70": "Microchips (stage 3c)",
                "71": "Microchips (stage 4a)",
                "72": "Microchips (stage 4b)",
                "73": "Molten copper",
                "74": "Molten glass",
                "75": "Molten iron",
                "76": "Molten silicon",
                "77": "Molten steel",
                "78": "MOX rod",
                "79": "Morphine",
                "7a": "Naphtha",
                "7b": "Nitrogen",
                "7c": "Oxygen",
                "7d": "Paper",
                "7e": "PCB",
                "7f": "Plastic",
                "80": "Plutonium",
                "81": "Poppy",
                "82": "Potato",
                "83": "Quartz",
                "84": "Quartz crushed",
                "85": "Recyclables",
                "86": "Recyclables pressed",
                "87": "Reprocessed uranium (1%)",
                "88": "Research I",
                "89": "Research II",
                "8a": "Research III",
                "8b": "Research IV",
                "8c": "Research V",
                "8d": "Retired waste",
                "8e": "Rock",
                "8f": "Rubber",
                "90": "Salt",
                "91": "Sand",
                "92": "Sausage",
                "93": "Seawater",
                "94": "Server",
                "95": "Silicon (poly)",
                "96": "Silicon wafer",
                "97": "Slag",
                "98": "Slag crushed",
                "99": "Sludge",
                "9a": "Snack",
                "9b": "Solar cell",
                "9c": "Solar cell mono",
                "9d": "Solar panel",
                "9e": "Sour water",
                "9f": "Soybean",
                "a0": "Spent fuel",
                "a1": "Spent MOX",
                "a2": "Steam (high)",
                "a3": "Steam (low)",
                "a4": "Steam (super)",
                "a5": "Steam depleted",
                "a6": "Steel",
                "a7": "Sugar",
                "a8": "Sugar cane",
                "a9": "Sulfur",
                "aa": "Tofu",
                "ab": "Toxic slurry",
                "ac": "Tree sapling",
                "ad": "Uranium ore",
                "ae": "Uranium ore crushed",
                "af": "Uranium rod",
                "b0": "Vegetables",
                "b1": "Vehicle parts",
                "b2": "Vehicle parts II",
                "b3": "Vehicle parts III",
                "b4": "Waste",
                "b5": "Waste pressed",
                "b6": "Waste water",
                "b7": "Water",
                "b8": "Water pollution",
                "b9": "Wheat",
                "ba": "Wood",
                "bb": "Woodchips",
                "bc": "Yellowcake",
            },
        }
        for recipe in data["recipes"]:
            if "2c" in recipe[1].keys():
                recipe[1]["2c"] *= settingValue("electricityMultiplier")
    else:
        data = {
            "recipes": list(),
            "machineRequirements": list(),
            "machines": dict(),
            "durationUnit": str(),
            "gameSettings": dict(),
            "defaultGameSettings": dict(),
            "unitFactor": int(),
            "itemUnit": str(),
            "itemUnitLong": str(),
            "items": dict(),
        }
    if parameter == None:
        return data
    else:
        return data[parameter]


def getData(game: str, gameSettings: dict = {}, parameter: str = None):
    def reformatRecipes(recipeList: list):
        recipes = []
        for index in range(len(recipeList)):
            recipe = recipeList[index]
            inputs = []
            for item in list(recipe[0].keys()):
                inputs.append({"item": data["items"][item], "amount": recipe[0][item]})
            outputs = []
            for item in list(recipe[1].keys()):
                outputs.append({"item": data["items"][item], "amount": recipe[1][item]})
            recipes.append(
                {
                    "inputs": inputs,
                    "outputs": outputs,
                    "duration": recipe[2],
                    "machine": data["machines"][recipe[3]][0],
                    "id": index,
                }
            )
        return recipes

    def reformatMachines(machines: dict, requirementKey: list):
        machineList = []
        for machine in list(machines.values()):
            requirements = {}
            for index in range(len(machine[1])):
                requirements[requirementKey[index][0]] = machine[1][index]
            machineList.append({"name": machine[0], "requirements": requirements})
        return machineList

    def reformatRequirements(requirementList: list):
        requirements = []
        for requirement in requirementList:
            requirements.append(
                {
                    "name": requirement[0],
                    "utilisationDependency": requirement[1],
                    "unit": requirement[2],
                }
            )
        return requirements

    def reformatItems(items: dict):
        return list(items.values())

    reformattingFunctions = {
        "recipes": lambda: reformatRecipes(getRawData(game, gameSettings, "recipes")()),
        "machineRequirements": lambda: reformatRequirements(
            getRawData(game, gameSettings, "machineRequirements")()
        ),
        "machines": lambda: reformatMachines(
            getRawData(game, gameSettings, "machines")(),
            getRawData(game, gameSettings, "machineRequirements")(),
        ),
        "durationUnit": lambda: getRawData(game, gameSettings, "durationUnit"),
        "gameSettings": lambda: getRawData(game, gameSettings, "gameSettings"),
        "defaultGameSettings": lambda: getRawData(
            game, gameSettings, "defaultGameSettings"
        ),
        "unitFactor": lambda: getRawData(game, gameSettings, "unitFactor"),
        "itemUnit": lambda: getRawData(game, gameSettings, "recipes"),
        "itemUnitLong": lambda: getRawData(game, gameSettings, "itemUnitLong"),
        "items": lambda: reformatItems(getRawData(game, gameSettings, "items")),
    }
    if parameter == None:
        for field in list(reformattingFunctions.keys()):
            data[field] = reformattingFunctions[field]()
    else:
        data = reformattingFunctions[parameter]()
    return data


# production requirement variables
# exitReq = False
# keys = []
# values = []

# production requirement setter
# while exitReq == False:
#     print()
#     print("What item do you wish to produce in your factory?")
#     print("Type 'search' to enable search-mode:")
#     item = str(input(">>> "))
#     searchString = ""
#     while (item not in items.values()) or item == "search":
#         print()
#         print(
#             "Search mode enabled - if the item is incorrect, all items beginning with the first letter will be listed."
#         )
#         print("If you have identified the correct item, you can type it:")
#         item = str(input(">>> "))
#         if item not in list(items.values()) and bool(item):
#             if len(item) > len(searchString):
#                 searchString += item[len(searchString)]
#             else:
#                 searchString = ""
#             searchResults = []
#             if searchString != "":
#                 for candidate in list(items.values()):
#                     if len(candidate) >= len(searchString):
#                         trueString = candidate[0 : len(searchString)]
#                     else:
#                         trueString = ""
#                     if trueString == searchString:
#                         searchResults.append(candidate)
#             if len(searchResults) == 0:
#                 searchString = ""
#                 print()
#                 print("No results found.")
#             else:
#                 print()
#                 for result in searchResults:
#                     print(result)
#     item = itemIndices[item]
#     if item in keys:
#         print("Would you like to remove this item? Type y/n:")
#         removal = boolean[str(input(">>> "))]
#         if removal:
#             values.pop(keys.index(item))
#             keys.remove(item)
#         else:
#             print(f"How much more of this item ({itemUnitLong}) would you like to produce?")
#             print(f"You're currently aiming to produce {values[keys.index(item)]}{itemUnit}.")
#             amount = float(input(">>> "))
#             values[keys.index(item)] += amount
#     else:
#         print(f"How much of this item ({itemUnitLong}) would you like to produce?")
#         print("Enter 0 to not add item:")
#         amount = float(input(">>> "))
#         if amount != 0:
#             keys.append(item)
#             values.append(amount)
#     print()
#     if len(keys) == 0:
#         print("You are currently aiming to produce nothing.")
#     else:
#         print("You are currently aiming to produce:")
#     for index in range(0, len(keys)):
#         print(f"{values[index]}{itemUnit} of {items[keys[index]]}")
#     print()
#     print("Would you like to add/remove another item to/from the requirements?")
#     print("Type y/n:")
#     exitReq = not (boolean[str(input(">>> "))])
# production values
# zeroes = []
# for index in range(0, len(keys)):
#     zeroes.append(0)
# production = dict(zip(keys, zeroes))
# excess = dict(zip(keys, values))
# checklist = keys
# item unit setter (per time-unit vs per recipe)
# print()
# print(f"Would you like item values to be shown {itemUnitLong}, or for the recipe's duration?")
# print(f"Type 'y' for {itemUnitLong}; 'n' for recipe duration:")
# perDuration = boolean[str(input(">>> "))]
# print()

# # recipe string generator
# def recipeString(recipe):
#     global perDuration
#     global unitFactor
#     global durationUnit
#     global itemUnitLong
#     result = str(machines[recipe[3]][0]) + " "
#     inputItems = list(recipe[0].keys())
#     inputValues = list(recipe[0].values())
#     outputItems = list(recipe[1].keys())
#     outputValues = list(recipe[1].values())
#     if perDuration:
#         for item in range(len(inputValues)):
#             inputValues[item] *= unitFactor / recipe[2]
#         for item in range(len(outputValues)):
#             outputValues[item] *= unitFactor / recipe[2]
#     if len(outputItems) == 0:
#         result += "consumimg "
#     elif len(inputItems) == 0:
#         result += "producing "
#     else:
#         result += "performing "
#     def itemAmount(amount:float):
#         if int(amount) == amount:
#             return int(amount)
#         else:
#             return int(amount * 1000) / 1000
#     for index in range(0, len(inputItems)):
#         result += f"{itemAmount(inputValues[index])} {items[inputItems[index]]}"
#         if index == len(inputItems) - 1:
#             if len(outputItems) > 0:
#                 result += " --> "
#         else:
#             result += " + "
#     for index in range(0, len(outputItems)):
#         result += f"{itemAmount(outputValues[index])} {items[outputItems[index]]}"
#         if index < len(outputItems) - 1:
#             result += " + "
#     if perDuration:
#         result += f" {itemUnitLong}."
#     else:
#         result += f" in {recipe[2]}{durationUnit}."
#     return result


# chosen recipes table
# notChosen = []
# notFinal = []
# for index in range(0, len(items.keys())):
#     notChosen.append(-1)
#     notFinal.append(False)
# chosenRecipes = {
#     1: dict(zip(list(items.keys()), notChosen)), # production recipes
#     -1: dict(zip(list(items.keys()), notChosen)), # consumption recipes
# }
# removalRecipe = {
#     -1:dict(zip(list(items.keys()), notFinal)),
#     1:dict(zip(list(items.keys()), notFinal)),
# }

# lookup in dictionary-lists
def lookup(
    lookupList: list[dict],
    lookupField: any,
    lookupValue: any = None,
    returnField: any = None,
    returnFirstOnly: bool = True,
    ifNotFound: any = None,
):
    if lookupValue == None:
        return [value[lookupField] for value in lookupList]
    else:
        output = [
            value[lookupField]
            for value in lookupList
            if value[returnField] == lookupValue
        ]
        if returnFirstOnly:
            if len(output) > 0:
                return output[0]
            else:
                return ifNotFound
        else:
            return output

# allowed recipe calculator
def allowedRecipes(item: str, amount: float, recipes: list):
    searchSide = {-1: "inputs", 1: "outputs"}
    recipeType = 1
    if amount < 0:
        recipeType *= -1
    allowedRecipeList = []
    for index in range(len(recipes)):
        for candidate in recipes[index][searchSide[recipeType]]:
            if item == candidate["item"]:
                allowedRecipeList.append(recipes[index])
    return allowedRecipeList


# MAIN CALCULATOR
def productionLine(chosenRecipes: dict, requiredItems: dict, recipes: list):
    textIndex = {0: "inputs", 1: "outputs"}
    searchSide = {-1: "inputs", 1: "outputs"}
    excessFactors = {0: 1, 1: -1}
    finalProducts = {}
    recipeAmounts = {}
    zeroes = []
    for index in range(len(list(requiredItems.keys()))):
        zeroes.append(0)
    production = dict(zip(list(requiredItems.keys()), zeroes))
    excess = requiredItems.copy()
    checklist = list(requiredItems.keys())
    while len(checklist) > 0:
        item = checklist[0]
        # recipe type
        recipeType = 1
        if excess[item] < 0:
            recipeType *= -1
        if currentValue(production, item) * recipeType < 0:
            recipeType *= -1
        if (currentValue(production, item) + excess[item]) * recipeType < 0:
            leftover = excess[item] + production[item]
            excess[item] = -production[item]
        else:
            leftover = 0
        production[item] = currentValue(production, item) + excess[item]
        recipeChosen = currentValue(chosenRecipes[recipeType], item, -1) != -1
        # working out values
        if recipeChosen:
            if abs(excess[item]) > 2**-32:  # to prevent diminishing loops
                recipeIndex = chosenRecipes[recipeType][item]
                itemRecipe = recipes[recipeIndex]
                itemQuantity = lookup(
                    item, itemRecipe[searchSide[recipeType]], "item", "amount"
                )
                recipeQuantity = recipeType * excess[item] / itemQuantity
                recipeAmounts[recipeIndex] = (
                    currentValue(recipeAmounts, recipeIndex) + recipeQuantity
                )
                for recipeSideIndex in range(1):
                    recipeSide = textIndex[recipeSideIndex]
                    for recipeItem in list(itemRecipe[recipeSide].keys()):
                        if recipeItem != item or recipeSide != searchSide[recipeType]:
                            excess[recipeItem] = (
                                currentValue(excess, recipeItem)
                                + excessFactors[recipeSide]
                                * recipeQuantity
                                * itemRecipe[recipeSide][recipeItem]
                            )
                            if recipeItem not in checklist:
                                checklist.append(recipeItem)
        else:  # item removal
            finalProducts[item] = currentValue(finalProducts, item) + excess[item]
        if leftover == 0:
            excess.pop(item)
            checklist.remove(item)
        else:
            excess[item] = leftover
    productionRates = []
    for item in list(production.keys()):
        if production[item] != 0:
            productionRates.append({"item": item, "amount": production[item]})
    requiredInputs = []
    for item in list(finalProducts.keys()):
        if finalProducts[item] != 0:
            requiredInputs.append({"item": item, "amount": finalProducts[item]})
    recipeQuantities = []
    for recipeIndex in list(recipeAmounts.keys()):
        if recipeAmounts[recipeIndex] != 0:
            recipeQuantities.append(
                {"recipeId": recipeIndex, "quantity": recipeAmounts[recipeIndex]}
            )
    return {
        "productionRates": productionRates,
        "requiredInputs": requiredInputs,
        "recipes": recipeQuantities,
    }

# maths functions
def sign(value:int|float):
    if value > 0:
        return 1
    elif value < 0:
        return -1
    else:
        return 0
def roundUp(value: int | float):
    if value == int(value):
        value = int(value)
    else:
        value = int(value) + sign(value)
    return value
def roundToDigit(value:int|float,digits:int=0,roundMode:str="down"):
    value *= 10 ** digits
    if roundMode == "down":
        value = int(value)
    else:
        value = roundUp(value)
    value /= 10 ** digits
    return intConvert(value)
# integer coversions for printing values
def intConvert(value:int|float):
    if int(value) == value:
        value = int(value)
    return value

# selective rounding of machine numbers
def requirementRounder(quantity: int | float, utilisationDependency: bool):
    if not utilisationDependency:
        quantity = roundUp(quantity)
    return quantity

# machine quantity aggregator and requirement calculator
def machineCalculator(
        recipeQuantities: list[dict],
        recipes: list[dict],
        machines: list[dict],
        requirementList: list[dict],
    ):
    machineAmounts = {}
    for recipe in recipeQuantities:
        recipeMachine = lookup(recipes, "id", recipes[recipe["recipeId"]], "machine")
        machineAmounts[recipeMachine] = (
            currentValue(machineAmounts, recipeMachine) + recipe["quantity"]
        )
    requirements = {}
    machineQuantities = []
    for machine in list(machineAmounts.keys()):
        machineQuantities.append(
            {"machine": machine, "quantity": machineAmounts[machine]}
        )
        for requirement in lookup(requirementList, "name"):
            requirements[requirement] = (
                currentValue(requirements, requirement)
                + requirementRounder(
                    machineAmounts[machine],
                    lookup(
                        requirementList, "name", requirement, "utilisationDependency"
                    ),
                )
                * machines[machine]["requirements"][requirement]
            )
    machineRequirements = []
    for requirement in list(requirements.keys()):
        machineRequirements.append(
            {"requirement": requirement, "value": requirements[requirement]}
        )
    return {"quantities": machineQuantities, "requirements": machineRequirements}

# output of machine requirements
def requirementStrings(totalRequirements: list[dict], requirementList: list[dict]):
    outputStrings = []
    for requirement in lookup(totalRequirements, "name"):
        requirementUnit = lookup(requirementList,"name",requirement,"unit")
        outputStrings.append(roundToDigit(totalRequirements,2,"up") + requirementUnit + requirement)
    return outputStrings

# # totalling machines
# print()
# print("Machine numbers:")
# # setting up requirement totals
# totalRequirements = []
# for index in range(len(machineRequirements)):
#     totalRequirements.append(0)
# for machine in list(machines.keys()):
#     # determining machine number
#     for index in list(machines[machine][2].keys()):
#         machineNumber = machines[machine][2][index]
#         roundedNumber = int(machineNumber - 10**-6) + 1
#         print(f"{roundedNumber} * {recipeString(recipes[index])}")
#         # determining requirements
#         for requirement in range(len(machineRequirements)):
#             if machineRequirements[requirement][1]:
#                 requirementMultiplier = machineNumber
#             else:
#                 requirementMultiplier = roundedNumber
#             totalRequirements[requirement] += machines[machine][1][requirement] * requirementMultiplier
#
# # total requirements
# print()
# print("Totals:")
# for requirement in range(len(machineRequirements)):
#     amount = int(totalRequirements[requirement])
#     if amount != 0:
#         print(
#             f"{amount}{machineRequirements[requirement][2]} {machineRequirements[requirement][0]}."
#         )
# # item filtering into byproducts and inputs
# finalItems = list(finalProducts.keys())
# byproducts = []
# inputs = []
# for finalItem in finalItems:
#     if finalProducts[finalItem] < 0:
#         byproducts.append(finalItem)
#     if finalProducts[finalItem] > 0:
#         inputs.append(finalItem)
# # byproducts
# if len(byproducts) > 0:
#     print()
#     print("Byproducts:")
#     for value in byproducts:
#         print(f"{int(finalProducts[value] * -100) / 100}{itemUnit} of {items[value]}")
# # inputs
# if len(inputs) > 0:
#     print()
#     print("Inputs:")
#     for value in inputs:
#         print(f"{int(finalProducts[value] * 100) / 100}{itemUnit} of {items[value]}")
# print()
# print("We hope you found your experience helpful.")
# print()
# input() # to prevent auto-termination
# quit(code="Service complete.")
#
